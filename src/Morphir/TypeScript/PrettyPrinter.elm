module Morphir.TypeScript.PrettyPrinter exposing
    ( Options, mapCompilationUnit, mapTypeDef, mapTypeExp
    , mapObjectExp
    )

{-| This module contains a pretty-printer that takes a TypeScript AST as an input and returns a formatted text
representation.

@docs Options, mapCompilationUnit, mapTypeDef, mapTypeExp

-}

import Morphir.File.SourceCode exposing (Doc, concat, empty, indentLines, newLine)
import Morphir.TypeScript.AST exposing (CompilationUnit, ObjectExp, TypeDef(..), TypeExp(..))


{-| Formatting options.
-}
type alias Options =
    { indentDepth : Int
    }


{-| -}
mapCompilationUnit : Options -> CompilationUnit -> Doc
mapCompilationUnit opt cu =
    concat
        [ "// Generated by morphir-elm"
        , newLine
        , cu.typeDefs
            |> List.map (mapTypeDef opt)
            |> String.join (newLine ++ newLine)
        , newLine
        ]


{-| Map a type definition to text.
-}
mapTypeDef : Options -> TypeDef -> Doc
mapTypeDef opt typeDef =
    case typeDef of
        TypeAlias name typeExp ->
            concat [ "type ", name, " = ", mapTypeExp opt typeExp ]

        Interface name fields ->
            concat
                [ "interface "
                , name
                , mapObjectExp opt fields
                ]


{-| Map an object expression or interface definiton to text
-}
mapObjectExp : Options -> ObjectExp -> Doc
mapObjectExp opt objectExp =
    let
        mapField : ( String, TypeExp ) -> Doc
        mapField ( fieldName, fieldType ) =
            concat [ fieldName, ": ", mapTypeExp opt fieldType, ";" ]
    in
    concat
        [ "{"
        , newLine
        , objectExp
            |> List.map mapField
            |> indentLines opt.indentDepth
        , newLine
        , "}"
        ]


{-| Map a type expression to text.
-}
mapTypeExp : Options -> TypeExp -> Doc
mapTypeExp opt typeExp =
    case typeExp of
        Any ->
            "any"

        Boolean ->
            "boolean"

        List listType ->
            "Array<" ++ mapTypeExp opt listType ++ ">"

        LiteralString stringval ->
            "\"" ++ stringval ++ "\""

        Number ->
            "number"

        Object fieldList ->
            mapObjectExp opt fieldList

        String ->
            "string"

        Tuple tupleTypesList ->
            let
                mappedtupleTypesList =
                    tupleTypesList |> List.map (mapTypeExp opt)
            in
            "[" ++ String.join ", " mappedtupleTypesList ++ "]"

        TypeRef name ->
            name

        Union types ->
            types |> List.map (mapTypeExp opt) |> String.join " | "

        UnhandledType tpe ->
            concat
                [ "any"
                , " /* Unhandled type: "
                , tpe
                , " */"
                ]
