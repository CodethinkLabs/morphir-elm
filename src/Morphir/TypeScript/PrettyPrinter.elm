module Morphir.TypeScript.PrettyPrinter exposing
    ( Options, mapCompilationUnit, mapTypeDef, mapTypeExp
    , mapObjectExp
    )

{-| This module contains a pretty-printer that takes a TypeScript AST as an input and returns a formatted text
representation.

@docs Options, mapCompilationUnit, mapTypeDef, mapTypeExp

-}

import Morphir.File.SourceCode exposing (Doc, concat, empty, indentLines, newLine)
import Morphir.TypeScript.AST exposing (CompilationUnit, ObjectExp, Privacy(..), TypeDef(..), TypeExp(..))


{-| Formatting options.
-}
type alias Options =
    { indentDepth : Int
    }


{-| -}
mapCompilationUnit : Options -> CompilationUnit -> Doc
mapCompilationUnit opt cu =
    concat
        [ "// Generated by morphir-elm"
        , newLine
        , newLine
        , cu.typeDefs
            |> List.map (mapTypeDef opt)
            |> String.join (newLine ++ newLine)
        , newLine
        ]


{-| Map a type definition to text.
-}
mapGenericVariables : Options -> List TypeExp -> String
mapGenericVariables opt variables =
    case List.length variables of
        0 ->
            ""

        _ ->
            concat
                [ "<"
                , String.join ", " (variables |> List.map (mapTypeExp opt))
                , ">"
                ]


mapTypeDef : Options -> TypeDef -> Doc
mapTypeDef opt typeDef =
    let
        exportIfPublic : Privacy -> String
        exportIfPublic privacy =
            case privacy of
                Public ->
                    "export "

                Private ->
                    ""
    in
    case typeDef of
        TypeAlias { name, privacy, doc, variables, typeExpression } ->
            let
                docstring =
                    if String.length doc > 0 then
                        String.concat [ "/*", doc, "*/" ]

                    else
                        ""
            in
            concat
                [ docstring
                , newLine
                , privacy |> exportIfPublic
                , "type "
                , name
                , mapGenericVariables opt variables
                , " = "
                , mapTypeExp opt typeExpression
                ]

        Interface { name, privacy, variables, fields } ->
            concat
                [ privacy |> exportIfPublic
                , "interface "
                , name
                , mapGenericVariables opt variables
                , mapObjectExp opt fields
                ]


{-| Map an object expression or interface definiton to text
-}
mapObjectExp : Options -> ObjectExp -> Doc
mapObjectExp opt objectExp =
    let
        mapField : ( String, TypeExp ) -> Doc
        mapField ( fieldName, fieldType ) =
            concat [ fieldName, ": ", mapTypeExp opt fieldType, ";" ]
    in
    concat
        [ "{"
        , newLine
        , objectExp
            |> List.map mapField
            |> indentLines opt.indentDepth
        , newLine
        , "}"
        ]


{-| Map a type expression to text.
-}
mapTypeExp : Options -> TypeExp -> Doc
mapTypeExp opt typeExp =
    case typeExp of
        Any ->
            "any"

        Boolean ->
            "boolean"

        List listType ->
            "Array<" ++ mapTypeExp opt listType ++ ">"

        LiteralString stringval ->
            "\"" ++ stringval ++ "\""

        Number ->
            "number"

        Object fieldList ->
            mapObjectExp opt fieldList

        String ->
            "string"

        Tuple tupleTypesList ->
            concat
                [ "["
                , tupleTypesList
                    |> List.map (mapTypeExp opt)
                    |> String.join ", "
                , "]"
                ]

        TypeRef name variables ->
            name ++ mapGenericVariables opt variables

        Union types ->
            types |> List.map (mapTypeExp opt) |> String.join " | "

        Variable name ->
            name

        UnhandledType tpe ->
            concat
                [ "any"
                , " /* Unhandled type: "
                , tpe
                , " */"
                ]
